From 1562a4cdd61d33cae912bc3d8b4d3f8e02d02083 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Wed, 18 Mar 2020 11:55:56 -0500
Subject: [PATCH 1/2] Fixes for PyPy support

---
 cmake/FindCython.cmake | 22 ++++++++++++----------
 cmake/FindPython.cmake | 18 ++++++------------
 cmake/get_suffix.py    |  7 +++++++
 3 files changed, 25 insertions(+), 22 deletions(-)
 create mode 100644 cmake/get_suffix.py

diff --git a/cmake/FindCython.cmake b/cmake/FindCython.cmake
index 8d9c473..e474bbc 100644
--- a/cmake/FindCython.cmake
+++ b/cmake/FindCython.cmake
@@ -4,7 +4,8 @@
 
 # This finds the "cython" executable in your PATH, and then in some standard
 # paths:
-SET(CYTHON_BIN cython CACHE STRING "Cython executable name")
+
+find_program(CYTHON_BIN NAMES cython cython3 cython2)
 SET(CYTHON_FLAGS --cplus --fast-fail)
 
 SET(Cython_FOUND FALSE)
@@ -27,21 +28,22 @@ ENDIF (CYTHON_BIN)
 
 
 IF (Cython_FOUND)
-	IF (NOT Cython_FIND_QUIETLY)
-		MESSAGE(STATUS "Found CYTHON: ${CYTHON_BIN}")
-	ENDIF (NOT Cython_FIND_QUIETLY)
+    IF (NOT Cython_FIND_QUIETLY)
+        MESSAGE(STATUS "Found CYTHON: ${CYTHON_BIN}")
+    ENDIF (NOT Cython_FIND_QUIETLY)
 ELSE (Cython_FOUND)
-	IF (Cython_FIND_REQUIRED)
+    IF (Cython_FIND_REQUIRED)
         if(Cython_Compilation_Failed)
             MESSAGE(STATUS "Found CYTHON: ${CYTHON_BIN}")
-			# On Win the testing of Cython does not return any accessible value, so the test is not carried out. Fresh Cython install was tested and works.
-			IF(NOT MSVC)
-				MESSAGE(FATAL_ERROR "Your Cython version is too old. Please upgrade Cython.")
-			ENDIF(NOT MSVC)
+            # On Win the testing of Cython does not return any accessible value, so the test is not carried out.
+            # Fresh Cython install was tested and works.
+            IF(NOT MSVC)
+                MESSAGE(FATAL_ERROR "Your Cython version is too old. Please upgrade Cython.")
+            ENDIF(NOT MSVC)
         else(Cython_Compilation_Failed)
             MESSAGE(FATAL_ERROR "Could not find Cython. Please install Cython.")
         endif(Cython_Compilation_Failed)
-	ENDIF (Cython_FIND_REQUIRED)
+    ENDIF (Cython_FIND_REQUIRED)
 ENDIF (Cython_FOUND)
 
 
diff --git a/cmake/FindPython.cmake b/cmake/FindPython.cmake
index a74ef4a..f4f8dd9 100644
--- a/cmake/FindPython.cmake
+++ b/cmake/FindPython.cmake
@@ -56,18 +56,12 @@ set(PYTHON_INSTALL_PATH ${PYTHON_INSTALL_PATH_tmp}
     CACHE BOOL "Python install path")
 message(STATUS "Python install path: ${PYTHON_INSTALL_PATH}")
 
-if (NOT WIN32)
-    execute_process(
-        COMMAND ${PYTHON_BIN} -c "from distutils.sysconfig import get_config_var; print(get_config_var('SOABI'))"
-        OUTPUT_VARIABLE PYTHON_EXTENSION_SOABI_tmp
-        )
-    string(STRIP ${PYTHON_EXTENSION_SOABI_tmp} PYTHON_EXTENSION_SOABI_tmp)
-    if (NOT "${PYTHON_EXTENSION_SOABI_tmp}" STREQUAL "None")
-        set(PYTHON_EXTENSION_SOABI_tmp ".${PYTHON_EXTENSION_SOABI_tmp}")
-    else()
-        set(PYTHON_EXTENSION_SOABI_tmp "")
-    endif()
-endif()
+execute_process(
+    COMMAND ${PYTHON_BIN} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/get_suffix.py
+    OUTPUT_VARIABLE PYTHON_EXTENSION_SOABI_tmp
+)
+string(STRIP ${PYTHON_EXTENSION_SOABI_tmp} PYTHON_EXTENSION_SOABI_tmp)
+
 set(PYTHON_EXTENSION_SOABI ${PYTHON_EXTENSION_SOABI_tmp}
     CACHE STRING "Suffix for python extensions")
 
diff --git a/cmake/get_suffix.py b/cmake/get_suffix.py
new file mode 100644
index 0000000..4871c48
--- /dev/null
+++ b/cmake/get_suffix.py
@@ -0,0 +1,7 @@
+from __future__ import print_function
+from distutils.sysconfig import get_config_var
+extsuffix = get_config_var('EXT_SUFFIX')
+if extsuffix is None:
+    print("")
+else:
+    print(extsuffix[0:].rsplit(".", 1)[0])

From c0681b23602e96e276ef779fa589c93e1303fe0d Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Wed, 18 Mar 2020 22:16:58 -0500
Subject: [PATCH 2/2] Skip a test on PyPy

---
 symengine/tests/test_symbol.py | 20 +++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

diff --git a/symengine/tests/test_symbol.py b/symengine/tests/test_symbol.py
index bd02432..ad9d923 100644
--- a/symengine/tests/test_symbol.py
+++ b/symengine/tests/test_symbol.py
@@ -1,5 +1,7 @@
 from symengine import Symbol, symbols, symarray, has_symbol, Dummy
 from symengine.utilities import raises
+import unittest
+import platform
 
 
 def test_symbol():
@@ -8,9 +10,6 @@ def test_symbol():
     assert str(x) == "x"
     assert str(x) != "y"
     assert repr(x) == str(x)
-    # Verify the successful use of slots.
-    assert not hasattr(x, "__dict__")
-    assert not hasattr(x, "__weakref__")
 
 
 def test_symbols():
@@ -163,6 +162,17 @@ def test_dummy():
     assert xdummy1 != xdummy2
     assert Dummy() != Dummy()
     assert Dummy('x') != Dummy('x')
+
+# Cython cdef classes on PyPy has a __dict__ attribute always
+# __slots__ on PyPy are useless anyways. https://stackoverflow.com/a/23077685/4768820
+@unittest.skipUnless(platform.python_implementation()=="CPython", "__slots__ are useless on PyPy")
+def test_slots():
+    x = Dummy('x')
     # Verify the successful use of slots.
-    assert not hasattr(xdummy1, "__dict__")
-    assert not hasattr(xdummy1, "__weakref__")
+    assert not hasattr(x, "__dict__")
+    assert not hasattr(x, "__weakref__")
+
+    x1 = Symbol('x')
+    # Verify the successful use of slots.
+    assert not hasattr(x, "__dict__")
+    assert not hasattr(x, "__weakref__")
